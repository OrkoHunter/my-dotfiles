81 2 102 3 113 4 124 5 44 6 105 6 45 7 65 8 96 8 107 8 281 2 102 3 113 4 124 5 44 6 105 6 45 7 65 8 96 8 107 8 281 2 102 3 113 4 124 5 44 6 105 6 45 7 65 8 96 8 107 8 281 2 102 3 113 4 124 5 44 6 105 6 45 7 65 8 96 8 107 8 281 2 102 3 113 4 124 5 44 6 105 6 45 7 65 8 96 8 10,V
//    printGraph(G);,V
,V
    int p;,V
    int d;,V
           ,V
                printf("The u,v pair : %d %d\n", u, v);,V
                iter = iter->next;,V
 ,v
            },V
                G->arr[v].color = GRAY;,V
            if (G->arr[iter->node].color==WHITE) {,V
        G->arr[u].color = BLACK;,V
            printf("The u,v pair : %d %d\n", u, v);            // Dijkstra hackery            if (G->arr[v].weight > G->arr[u].weight) {                G->arr[v].weight = G->arr[u].weight + edge_weight(G, u, v);            }                       iter = iter->next;,V
                ENQUEUE(Q, v);,V
                G->arr[v].p = u;,V
                G->arr[v].d = G->arr[u].d + 1;,V
        while(iter!=NULL) {            if (G->arr[iter->node].color==WHITE) {                v = iter->node;                G->arr[v].color = GRAY;                G->arr[v].d = G->arr[u].d + 1;                G->arr[v].p = u;                ENQUEUE(Q, v);            },V
        iter = G->arr[u].next;,V
        u = DEQUEUE(Q);,V
        struct listNode* iter;,V
    ENQUEUE(Q, s);,V
    // Start the traversal,V
    Q->head = Q->tail = 0;,V
    Q->length = MAX_SIZE - 1;,V
    Q = (struct Queue *)malloc(sizeof(struct Queue));,V
    struct Queue* Q;,V
    G->arr[s].d = 0;,V
        G->arr[i].d = INFINITE;,V
        G->arr[i].p = NIL;,V
            ENQUEUE(Q, v);,V
            ,V
                },V
                    G->arr[v].weight = G->arr[u].weight + edge_weight(G, u, v);,V
                if (G->arr[v].weight > G->arr[u].weight) {,V
                // Dijkstra hackery,V
                // Dijkstra hackery                if (G->arr[v].weight > G->arr[u].weight) {                    G->arr[v].weight = G->arr[u].weight + edge_weight(G, u, v);                },V
                ENQUEUE(Q, v);,V
f,v
/,v
d,v
#define INFINITE -1,V
p,v
    printf("Enter the node to start the traversal from : ");    int n;    scanf("%d", &n);,V
    int count = 0;    for (int i=1; i<=V; i++) {        if (G->arr[i].color == BLACK) {            count++;        }    },V
#define WHITE 0#define GRAY 1#define BLACK 2#define NIL 0#define INFINITE -1#define MAX_SIZE 100#include "stdio.h"#include "stdlib.h"#include "stdbool.h"// Elements of the Adjacency Liststruct listNode {    int node;    struct listNode *next;};// Elements of the array having pointers to the liststruct listArray {    struct listNode *next;    int color;    int d;    int p;};// The array representing the Graphstruct Graph {    int V;    struct listArray *arr;};// Function to return a new node for the Adjacency Liststruct listNode* newListNode(int node) {    struct listNode* newListNode;    newListNode = (struct listNode*)malloc(sizeof(struct listNode));    newListNode->node = node;    return newListNode;}// Function to add an edge between two nodesvoid addEdge(struct Graph* G, int node1, int node2) {    struct listNode* newNode = newListNode(node2);    newNode->next = (G->arr)[node1].next;    (G->arr)[node1].next = newNode;}// Function to print the Adjacency List of the Graphvoid printGraph(struct Graph* G) {    struct listNode* iter;    printf("\n");    for (int i = 1; i <= G->V; ++i) {        printf("Node = %d, Parent = %d, Distance = %d, Color = %d \n", i, G->arr[i].p, G->arr[i].d, G->arr[i].color);    }}// A Queue data structurestruct Queue {    int arr[MAX_SIZE];    int length;    int head;    int tail;};void ENQUEUE(struct Queue* Q, int s) {    Q->arr[Q->tail] = s;    if (Q->tail==Q->length) {        Q->tail = 0;    }    else        ++(Q->tail);}int DEQUEUE(struct Queue* Q) {    int to_return;    to_return = Q->arr[Q->head];    if (Q->head==Q->length) {        Q->head = 0;    }    else        ++(Q->head);    return to_return;}void BFS(struct Graph *G, int s) {    // Set configurations of all the nodes    for (int i = 1; i <= G->V; ++i) {        G->arr[i].color = WHITE;        G->arr[i].d = INFINITE;        G->arr[i].p = NIL;    }    // For the root    G->arr[s].color = GRAY;    G->arr[s].d = 0;    // Create empty Queue    struct Queue* Q;    Q = (struct Queue *)malloc(sizeof(struct Queue));    Q->length = MAX_SIZE - 1;    Q->head = Q->tail = 0;    // Start the traversal    ENQUEUE(Q, s);    int u, v;    while(Q->head!=Q->tail) {        u = DEQUEUE(Q);        struct listNode* iter;        iter = G->arr[u].next;        while(iter!=NULL) {            if (G->arr[iter->node].color==WHITE) {                v = iter->node;                G->arr[v].color = GRAY;                G->arr[v].d = G->arr[u].d + 1;                G->arr[v].p = u;                ENQUEUE(Q, v);            }            iter = iter->next;        }        G->arr[u].color = BLACK;    }}int main(int argc, char const *argv[]){    int V;  // The number of nodes    printf("Enter the number of nodes : \n");    scanf("%d", &V);    // Create a Graph G    struct Graph* G;    G = (struct Graph*)malloc(sizeof(struct Graph));    G->V = V;    // Here the node at index i will have the value i. So, the zeroth index is left empty.    G->arr = (struct listArray *)malloc((V+1)*sizeof(struct listArray));    for (int i = 1; i <= G->V; ++i) {        G->arr[i].next = NULL;    }    printf("Enter pair of nodes to add Edge :\n");    printf("(Enter (0, 0) to terminate)\n");    int node1, node2;    while(true) {        scanf("%d %d", &node1, &node2);        if (node1==0 || node2==0) {break;}        else            addEdge(G, node1, node2);            addEdge(G, node2, node1);    }       printf("Enter the node to start the traversal from : ");    int n;    scanf("%d", &n);    BFS(G, n);       int count = 0;    for (int i=1; i<=V; i++) {        if (G->arr[i].color == BLACK) {            count++;        }    }    if (count==G->V)        printf("The Graph is connected\n");    else        printf("The Graph is disconnected\n");},V
            printf("For iter->node = %d, iter->node.d = %d, u.d = %d\n", iter->node, G->arr[iter->node].d, G->arr[u].d);,V
G->arr[iter->node].d==G->arr[u].d ,v
n:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"TH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games",V
n:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"KDE_NO_IPV6=Truesocks_proxy="http://127.0.0.1:5555"SOCKS_PROXY="http://127.0.0.1:5555"PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"KDE_NO_IPV6=Truesocks_proxy="http://127.0.0.1:5555"SOCKS_PROXY="http://127.0.0.1:5555",V
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"KDE_NO_IPV6=Truesocks_proxy="http://127.0.0.1:5555"SOCKS_PROXY="http://127.0.0.1:5555",V
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"KDE_NO_IPV6=Truesocks_proxy="http://127.0.0.1:5555"SOCKS_PROXY="http://127.0.0.1:5555",V
    ,V
			if (G->arr[iter->node].d==G->arr[u].d) {				if (cycle_detected==NO) {					printf("The Graph is cyclic.\n");					cycle_detected = YES;				}			}    ,v
	cycle_detected = NO;,V
	int cycle_detected;,V
s,v
est whether a graph has a cycle or not using BFS,v
 T,v
/* Question 2 : Test whether a graph has a cycle or not using BFS * Submitted by : Himanshu Mishra * Roll : 14MA20014 */#define WHITE 0#define GRAY 1#define BLACK 2#define NIL 0#define INFINITE -1#define MAX_SIZE 100#define NO 0#define YES 1#include "stdio.h"#include "stdlib.h"#include "stdbool.h"// Elements of the Adjacency Liststruct listNode {    int node;    struct listNode *next;};// Elements of the array having pointers to the liststruct listArray {    struct listNode *next;    int color;    int d;    int p;};// The array representing the Graphstruct Graph {    int V;    struct listArray *arr;};// Function to return a new node for the Adjacency Liststruct listNode* newListNode(int node) {    struct listNode* newListNode;    newListNode = (struct listNode*)malloc(sizeof(struct listNode));    newListNode->node = node;    return newListNode;}// Function to add an edge between two nodesvoid addEdge(struct Graph* G, int node1, int node2) {    struct listNode* newNode = newListNode(node2);    newNode->next = (G->arr)[node1].next;    (G->arr)[node1].next = newNode;}// Function to print the Adjacency List of the Graphvoid printGraph(struct Graph* G) {    struct listNode* iter;    printf("\n");    for (int i = 1; i <= G->V; ++i) {        printf("Node = %d, Parent = %d, Distance = %d, Color = %d \n", i, G->arr[i].p, G->arr[i].d, G->arr[i].color);    }}// A Queue data structurestruct Queue {    int arr[MAX_SIZE];    int length;    int head;    int tail;};void ENQUEUE(struct Queue* Q, int s) {    Q->arr[Q->tail] = s;    if (Q->tail==Q->length) {        Q->tail = 0;    }    else        ++(Q->tail);}int DEQUEUE(struct Queue* Q) {    int to_return;    to_return = Q->arr[Q->head];    if (Q->head==Q->length) {        Q->head = 0;    }    else        ++(Q->head);    return to_return;}void BFS(struct Graph *G, int s) {	int cycle_detected;	cycle_detected = NO;    // Set configurations of all the nodes    for (int i = 1; i <= G->V; ++i) {        G->arr[i].color = WHITE;        G->arr[i].d = INFINITE;        G->arr[i].p = NIL;    }    // For the root    G->arr[s].color = GRAY;    G->arr[s].d = 0;    // Create empty Queue    struct Queue* Q;    Q = (struct Queue *)malloc(sizeof(struct Queue));    Q->length = MAX_SIZE - 1;    Q->head = Q->tail = 0;    // Start the traversal    ENQUEUE(Q, s);    int u, v;    while(Q->head!=Q->tail) {        u = DEQUEUE(Q);        struct listNode* iter;        iter = G->arr[u].next;        while(iter!=NULL) {			if (G->arr[iter->node].d==G->arr[u].d) {				if (cycle_detected==NO) {					printf("The Graph is cyclic.\n");					cycle_detected = YES;				}			}            else if (G->arr[iter->node].color==WHITE) {                v = iter->node;                G->arr[v].color = GRAY;                G->arr[v].d = G->arr[u].d + 1;                G->arr[v].p = u;                ENQUEUE(Q, v);            }            iter = iter->next;        }        G->arr[u].color = BLACK;    }}int main(int argc, char const *argv[]){    int V;  // The number of nodes    printf("Enter the number of nodes : \n");    scanf("%d", &V);    // Create a Graph G    struct Graph* G;    G = (struct Graph*)malloc(sizeof(struct Graph));    G->V = V;    // Here the node at index i will have the value i. So, the zeroth index is left empty.    G->arr = (struct listArray *)malloc((V+1)*sizeof(struct listArray));    for (int i = 1; i <= G->V; ++i) {        G->arr[i].next = NULL;    }    printf("Enter pair of nodes to add Edge :\n");    printf("(Enter (0, 0) to terminate)\n");    int node1, node2;    while(true) {        scanf("%d %d", &node1, &node2);        if (node1==0 || node2==0) {break;}        else            addEdge(G, node1, node2);            addEdge(G, node2, node1);    }        BFS(G, 1);   },V
3. Test whether a graph has an odd length cycle or not using BFS,V
1,v
b,v
